// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keepaway.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keepaway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace keepaway {

namespace {

const ::google::protobuf::Descriptor* StepIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepOut_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_keepaway_2eproto() {
  protobuf_AddDesc_keepaway_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "keepaway.proto");
  GOOGLE_CHECK(file != NULL);
  StepIn_descriptor_ = file->message_type(0);
  static const int StepIn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, episode_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, player_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, current_time_),
  };
  StepIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepIn_descriptor_,
      StepIn::default_instance_,
      StepIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepIn));
  StepOut_descriptor_ = file->message_type(1);
  static const int StepOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepOut, action_),
  };
  StepOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StepOut_descriptor_,
      StepOut::default_instance_,
      StepOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StepOut));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_keepaway_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepIn_descriptor_, &StepIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StepOut_descriptor_, &StepOut::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_keepaway_2eproto() {
  delete StepIn::default_instance_;
  delete StepIn_reflection_;
  delete StepOut::default_instance_;
  delete StepOut_reflection_;
}

void protobuf_AddDesc_keepaway_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016keepaway.proto\022\010keepaway\"j\n\006StepIn\022\016\n\006"
    "reward\030\001 \002(\001\022\021\n\005state\030\002 \003(\001B\002\020\001\022\023\n\013episo"
    "de_end\030\003 \002(\010\022\022\n\nplayer_pid\030\004 \002(\005\022\024\n\014curr"
    "ent_time\030\005 \002(\001\"\031\n\007StepOut\022\016\n\006action\030\001 \002("
    "\005", 161);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "keepaway.proto", &protobuf_RegisterTypes);
  StepIn::default_instance_ = new StepIn();
  StepOut::default_instance_ = new StepOut();
  StepIn::default_instance_->InitAsDefaultInstance();
  StepOut::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keepaway_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keepaway_2eproto {
  StaticDescriptorInitializer_keepaway_2eproto() {
    protobuf_AddDesc_keepaway_2eproto();
  }
} static_descriptor_initializer_keepaway_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StepIn::kRewardFieldNumber;
const int StepIn::kStateFieldNumber;
const int StepIn::kEpisodeEndFieldNumber;
const int StepIn::kPlayerPidFieldNumber;
const int StepIn::kCurrentTimeFieldNumber;
#endif  // !_MSC_VER

StepIn::StepIn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:keepaway.StepIn)
}

void StepIn::InitAsDefaultInstance() {
}

StepIn::StepIn(const StepIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:keepaway.StepIn)
}

void StepIn::SharedCtor() {
  _cached_size_ = 0;
  reward_ = 0;
  episode_end_ = false;
  player_pid_ = 0;
  current_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepIn::~StepIn() {
  // @@protoc_insertion_point(destructor:keepaway.StepIn)
  SharedDtor();
}

void StepIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepIn_descriptor_;
}

const StepIn& StepIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keepaway_2eproto();
  return *default_instance_;
}

StepIn* StepIn::default_instance_ = NULL;

StepIn* StepIn::New() const {
  return new StepIn;
}

void StepIn::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StepIn*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(episode_end_, current_time_);
    reward_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keepaway.StepIn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double reward = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // repeated double state = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_state())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_state())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_episode_end;
        break;
      }

      // required bool episode_end = 3;
      case 3: {
        if (tag == 24) {
         parse_episode_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &episode_end_)));
          set_has_episode_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_pid;
        break;
      }

      // required int32 player_pid = 4;
      case 4: {
        if (tag == 32) {
         parse_player_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_pid_)));
          set_has_player_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_current_time;
        break;
      }

      // required double current_time = 5;
      case 5: {
        if (tag == 41) {
         parse_current_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_time_)));
          set_has_current_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keepaway.StepIn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keepaway.StepIn)
  return false;
#undef DO_
}

void StepIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keepaway.StepIn)
  // required double reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->reward(), output);
  }

  // repeated double state = 2 [packed = true];
  if (this->state_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_state_cached_byte_size_);
  }
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->state(i), output);
  }

  // required bool episode_end = 3;
  if (has_episode_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->episode_end(), output);
  }

  // required int32 player_pid = 4;
  if (has_player_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_pid(), output);
  }

  // required double current_time = 5;
  if (has_current_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->current_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:keepaway.StepIn)
}

::google::protobuf::uint8* StepIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keepaway.StepIn)
  // required double reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->reward(), target);
  }

  // repeated double state = 2 [packed = true];
  if (this->state_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _state_cached_byte_size_, target);
  }
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->state(i), target);
  }

  // required bool episode_end = 3;
  if (has_episode_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->episode_end(), target);
  }

  // required int32 player_pid = 4;
  if (has_player_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_pid(), target);
  }

  // required double current_time = 5;
  if (has_current_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->current_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keepaway.StepIn)
  return target;
}

int StepIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double reward = 1;
    if (has_reward()) {
      total_size += 1 + 8;
    }

    // required bool episode_end = 3;
    if (has_episode_end()) {
      total_size += 1 + 1;
    }

    // required int32 player_pid = 4;
    if (has_player_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_pid());
    }

    // required double current_time = 5;
    if (has_current_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated double state = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->state_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _state_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepIn::MergeFrom(const StepIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_episode_end()) {
      set_episode_end(from.episode_end());
    }
    if (from.has_player_pid()) {
      set_player_pid(from.player_pid());
    }
    if (from.has_current_time()) {
      set_current_time(from.current_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepIn::CopyFrom(const StepIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void StepIn::Swap(StepIn* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    state_.Swap(&other->state_);
    std::swap(episode_end_, other->episode_end_);
    std::swap(player_pid_, other->player_pid_);
    std::swap(current_time_, other->current_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepIn_descriptor_;
  metadata.reflection = StepIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StepOut::kActionFieldNumber;
#endif  // !_MSC_VER

StepOut::StepOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:keepaway.StepOut)
}

void StepOut::InitAsDefaultInstance() {
}

StepOut::StepOut(const StepOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:keepaway.StepOut)
}

void StepOut::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StepOut::~StepOut() {
  // @@protoc_insertion_point(destructor:keepaway.StepOut)
  SharedDtor();
}

void StepOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StepOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepOut_descriptor_;
}

const StepOut& StepOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keepaway_2eproto();
  return *default_instance_;
}

StepOut* StepOut::default_instance_ = NULL;

StepOut* StepOut::New() const {
  return new StepOut;
}

void StepOut::Clear() {
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StepOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:keepaway.StepOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:keepaway.StepOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:keepaway.StepOut)
  return false;
#undef DO_
}

void StepOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:keepaway.StepOut)
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:keepaway.StepOut)
}

::google::protobuf::uint8* StepOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:keepaway.StepOut)
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keepaway.StepOut)
  return target;
}

int StepOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StepOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StepOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StepOut::MergeFrom(const StepOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StepOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepOut::CopyFrom(const StepOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StepOut::Swap(StepOut* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StepOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepOut_descriptor_;
  metadata.reflection = StepOut_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace keepaway

// @@protoc_insertion_point(global_scope)
